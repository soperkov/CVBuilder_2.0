@* CvBotanical.razor *@
@using CVBuilder.Core.Models
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<title>CvBotanical</title>
<style>
  @@page{ size:A4; margin:0 }

  :root{
    --paper:#f6efe5; --ink:#3b2f2a; --muted:#7b6a61;
    --sidebar:#efe6da; --main:#fff; --accent:#b3673b; /* terracotta */
  }

  html,body{height:100%}
  body{ margin:0; background:var(--paper); color:var(--ink); font-family:"Inter", Arial, sans-serif }

  .page{ width:210mm; height:297mm; display:flex; align-items:center; justify-content:center }
  .cv{
    position:relative; display:grid; grid-template-columns: 34% 66%;
    width:190mm; height:277mm; border-radius:12px; overflow:hidden; background:var(--main); box-shadow:0 2px 8px rgba(0,0,0,.08)
  }

  /* subtle botanical shapes with gradients */
  .cv::before{
    content:""; position:absolute; right:-40mm; top:-50mm; width:140mm; height:140mm; border-radius:50%;
    background:radial-gradient(closest-side, #efddc9 0%, rgba(0,0,0,0) 65%);
    opacity:.7;
  }
  .cv::after{
    content:""; position:absolute; left:-30mm; bottom:-50mm; width:120mm; height:120mm; border-radius:50%;
    background:radial-gradient(closest-side, #f3e5d6 0%, rgba(0,0,0,0) 70%);
    opacity:.8;
  }

  .sidebar{ background:var(--sidebar); padding:18mm 12mm; position:relative; z-index:1 }
  .main{ background:var(--main); padding:18mm 16mm; position:relative; z-index:1 }

  .photo{
    width:48mm; height:48mm; margin:0 auto 10mm; border-radius:50%; overflow:hidden;
    border:4px solid #fff; background:#dec5ae; display:flex; align-items:center; justify-content:center;
    box-shadow:0 4px 12px rgba(0,0,0,.15);
  }
  .photo img{ width:100%; height:100%; object-fit:cover; display:block }
  .photo .ph{ color:#fff; font-size:22px }

  h1{ margin:0 0 2mm; font-size:14mm; line-height:1.06; letter-spacing:.3mm; color:#2c201b; text-transform:uppercase }
  .title{ margin:0 0 12mm; color:var(--muted); font-size:4.2mm; letter-spacing:.2mm }

  h4{ margin:8mm 0 3mm; padding-bottom:2mm; font-size:4.6mm; font-weight:800; text-transform:uppercase }
  .sidebar h4{ color:#6b4a3b; border-bottom:2px solid #e2d4c3 }
  .main h4{ color:#3b2f2a; border-bottom:2px solid #eadfd4 }

        /* CONTACT LIST WITH STROKE-ONLY SVG ICONS */
        .kv {
            margin: 0 0 3mm;
            display: flex;
            align-items: flex-start;
            gap: 3mm;
        }

            .kv b {
                display: none
            }
            /* keep text clean, like the screenshot */
            .kv span, .kv a {
                color: #111827;
                font-size: 3.9mm;
                text-decoration: none;
                line-height: 1.35;
                word-break: break-word;
            }

            /* icon box */
            .kv .ico {
                width: 5mm;
                height: 5mm;
                flex: 0 0 auto;
                display: inline-flex;
                align-items: center;
                justify-content: center;
                margin-top: .4mm;
                color: #111827; /* controls stroke color via currentColor */
                opacity: .9;
            }

                .kv .ico svg {
                    width: 100%;
                    height: 100%;
                    fill: none;
                    stroke: currentColor;
                    stroke-width: 1.8;
                    stroke-linecap: round;
                    stroke-linejoin: round;
                }

            .kv::before {
                font-size: 4.2mm;
                line-height: 1;
                color: #111827;
                display: inline-block;
                width: 5mm;
                text-align: center;
                margin-top: .3mm;
            }

        .kv-phone::before {
            content: "📞";
        }

        .kv-email::before {
            content: "✉";
        }

        .kv-address::before {
            content: "📍";
        }

        .kv-web::before {
            content: "🌐";
        }

  .list{ list-style:none; margin:0; padding:0 }
  .list li{ margin:2.2mm 0; font-size:3.9mm }

  .pill{ background:#fff; color:#8a5535; display:inline-block; padding:1.2mm 3mm; border-radius:999px; margin:1mm 2mm 0 0; font-size:3.5mm; font-weight:700; border:1px solid #edd9c8 }

  .card{ background:#fff; border-left:4px solid var(--accent); border-radius:6px; padding:4mm 5mm; margin:4mm 0; box-shadow:0 1px 3px rgba(0,0,0,.06) }
  .card .when{ color:var(--muted); font-size:3.6mm }
  .card .who{ font-weight:800; color:#2c201b; font-size:4.1mm; margin-bottom:1mm }

  .section-gap{ margin-top:8mm }
  .muted{ color:var(--muted) }
</style>
</head>
<body>
  <div class="page">
    <div class="cv">
      <aside class="sidebar">
        <div class="photo">
          @if (!string.IsNullOrWhiteSpace(Model?.PhotoUrl)) { <img src="@Model!.PhotoUrl" alt="Profile Photo" /> } else { <span class="ph">👤</span> }
        </div>

                @if (!string.IsNullOrWhiteSpace(Model?.PhoneNumber)
                || !string.IsNullOrWhiteSpace(Model?.Email)
                || !string.IsNullOrWhiteSpace(Model?.Address)
                || !string.IsNullOrWhiteSpace(Model?.WebPage))
                {
                    <h4>Contact</h4>

                    @if (!string.IsNullOrWhiteSpace(Model?.PhoneNumber))
                    {
                        <p class="kv">
                            <span class="ico">
                                <svg viewBox="0 0 24 24" aria-hidden="true">
                                    <path d="M22 16.92v3a2 2 0 0 1-2.18 2A19.86 19.86 0 0 1 3 5.18 2 2 0 0 1 5 3h3a2 2 0 0 1 2 1.72c.12.9.31 1.77.57 2.61a2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.47-1.03a2 2 0 0 1 2.11-.45c.84.26 1.71.45 2.61.57A2 2 0 0 1 22 16.92z" />
                                </svg>
                            </span>
                            <span>@Model!.PhoneNumber</span>
                        </p>
                    }

                    @if (!string.IsNullOrWhiteSpace(Model?.Email))
                    {
                        <p class="kv">
                            <span class="ico">
                                <svg viewBox="0 0 24 24" aria-hidden="true">
                                    <rect x="3" y="5" width="18" height="14" rx="2" ry="2" />
                                    <polyline points="3 7 12 13 21 7" />
                                </svg>
                            </span>
                            <span>@Model!.Email</span>
                        </p>
                    }

                    @if (!string.IsNullOrWhiteSpace(Model?.Address))
                    {
                        <p class="kv">
                            <span class="ico">
                                <svg viewBox="0 0 24 24" aria-hidden="true">
                                    <path d="M21 10c0 6-9 12-9 12S3 16 3 10a9 9 0 1 1 18 0" />
                                    <circle cx="12" cy="10" r="3" />
                                </svg>
                            </span>
                            <span>@Model!.Address</span>
                        </p>
                    }

                    @if (!string.IsNullOrWhiteSpace(Model?.WebPage))
                    {
                        <p class="kv">
                            <span class="ico">
                                <svg viewBox="0 0 24 24" aria-hidden="true">
                                    <circle cx="12" cy="12" r="10" />
                                    <line x1="2" y1="12" x2="22" y2="12" />
                                    <path d="M12 2a15.3 15.3 0 0 1 0 20M12 2a15.3 15.3 0 0 0 0 20" />
                                </svg>
                            </span>
                            <a href="@Model!.WebPage">@Model!.WebPage</a>
                        </p>
                    }
                }


        @if (Model?.Skills is { Count: > 0 }) {
          <h4 class="section-gap">Skills</h4>
          <ul class="list">@foreach (var s in Model!.Skills) { <li>• @s.Name</li> }</ul>
        }

        @if (Model?.Language is { Count: > 0 }) {
          <h4 class="section-gap">Languages</h4>
          <ul class="list">
            @foreach (var l in Model!.Language) {
              <li><span class="pill">@((object)(l.Language?.Name ?? $"Language #{l.LanguageId}"))</span>
                <span class="muted"> @l.Level </span></li>
            }
          </ul>
        }
      </aside>

      <main class="main">
        <h1>@Model?.FullName</h1>
        @if (!string.IsNullOrWhiteSpace(Model?.JobTitle)) { <div class="title">@Model!.JobTitle</div> }

        @if (!string.IsNullOrWhiteSpace(Model?.AboutMe)) {
          <h4>Profile</h4>
          <p style="margin:4mm 0 0; font-size:4mm;">@Model!.AboutMe</p>
        }

        @if (Model?.Employment is { Count: > 0 }) {
          <h4 class="section-gap">Work Experience</h4>
          @foreach (var emp in Model!.Employment) {
            <div class="card">
              <div class="who">@emp.CompanyName</div>
              <div class="when">@emp.From.ToString("MMM yyyy") – @(emp.IsCurrent ? "Present" : emp.To?.ToString("MMM yyyy"))</div>
              @if (!string.IsNullOrWhiteSpace(emp.Description)) { <div style="margin-top:2mm">@emp.Description</div> }
            </div>
          }
        }

        @if (Model?.Education is { Count: > 0 }) {
          <h4 class="section-gap">Education</h4>
          @foreach (var edu in Model!.Education) {
            <div class="card">
              <div class="who">@edu.InstitutionName</div>
              <div class="when">@edu.From.ToString("MMM yyyy") – @(edu.IsCurrent ? "Present" : edu.To?.ToString("MMM yyyy"))</div>
              @if (!string.IsNullOrWhiteSpace(edu.Description)) { <div style="margin-top:2mm">@edu.Description</div> }
            </div>
          }
        }
      </main>
    </div>
  </div>
</body>
</html>

@code { 
    [Parameter] public CVModel Model { get; set; } = new(); 

    private MarkupString FormatStackTraceLine(string line)
    {
        return new MarkupString(line
            .Replace(" at ", "<span class='method'> at </span>")
            .Replace(" in ", " <span class='file'>in </span>")
            .Replace(":line", " <span class='line'>:line</span>"));
    }
}
