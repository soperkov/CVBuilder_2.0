@* CvPolygon.razor — warm header, small contact icons *@
@using CVBuilder.Core.Models
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<title>CvPolygon</title>
<style>
  @@page{ size:A4; margin:0 }

  :root{
    --paper:#f3f1ee;
    --header-from:#ece8e3;
    --header-to:#dad6d2;
    --ink:#1f2937;
    --muted:#6b7280;

    --sidebar:#ffffff;
    --main:#ffffff;

    --accent:#111827;  /* dark separators */
    --chip:#eef2f7;

    --shadow:0 2px 8px rgba(0,0,0,.06);
  }

  html,body{height:100%}
  body{ margin:0; background:var(--paper); color:var(--ink); font-family:"Inter",Arial,sans-serif }

  .page{ width:210mm; height:297mm; display:flex; align-items:center; justify-content:center }
  .cv{
    position:relative; display:grid; grid-template-columns: 30% 70%;
    width:190mm; height:277mm; border-radius:12px; overflow:hidden; background:var(--main); box-shadow:var(--shadow);
  }

  /* warm header bar across the top */
  .cv::before{
    content:""; position:absolute; inset:0 0 auto 0; height:36mm;
    background:linear-gradient(180deg, var(--header-from) 0%, var(--header-to) 100%);
  }

  .sidebar{ background:var(--sidebar); padding:20mm 12mm 16mm; position:relative; z-index:1 }
  .main{ background:var(--main); padding:24mm 18mm 18mm; position:relative; z-index:1 }

  /* circular photo overlapping header */
  .photo{
    width:46mm; height:46mm; margin:0 auto 10mm; border-radius:50%;
    border:4px solid #fff; overflow:hidden; display:flex; align-items:center; justify-content:center;
    box-shadow:0 4px 12px rgba(0,0,0,.18); background:#d4d6db; transform:translateY(-12mm);
  }
  .photo img{ width:100%; height:100%; object-fit:cover; display:block }
  .photo .ph{ color:#fff; font-size:22px }

  h1{
    margin:0; font-size:13.8mm; letter-spacing:.4mm; line-height:1.06; color:#111827; text-transform:uppercase
  }
  .title{ margin:2mm 0 10mm; color:#4b5563; font-size:4.2mm; text-transform:uppercase; letter-spacing:.3mm }

  h4{
    margin:8mm 0 3mm; padding-bottom:2mm; font-size:4.6mm; font-weight:800; text-transform:uppercase
  }
  .sidebar h4{ border-bottom:2px solid #e7e7ea; color:#111827 }
  .main h4{ border-bottom:2px solid #e6e7eb; color:#111827 }

/* CONTACT LIST WITH STROKE-ONLY SVG ICONS */
.kv{
  margin:0 0 3mm;
  display:flex; align-items:flex-start; gap:3mm;
}
.kv b{ display:none } /* keep text clean, like the screenshot */
.kv span, .kv a{
  color:#111827; font-size:3.9mm; text-decoration:none; line-height:1.35; word-break:break-word;
}

/* icon box */
.kv .ico{
  width:5mm; height:5mm; flex:0 0 auto;
  display:inline-flex; align-items:center; justify-content:center;
  margin-top:.4mm; color:#111827; /* controls stroke color via currentColor */
  opacity:.9;
}
.kv .ico svg{
  width:100%; height:100%;
  fill:none;               
  stroke:currentColor;  
  stroke-width:1.8;
  stroke-linecap:round; stroke-linejoin:round;
}

  .kv::before{
    font-size:4.2mm; line-height:1; color:#111827; display:inline-block; width:5mm; text-align:center;
    margin-top:.3mm;
  }
  .kv-phone::before   { content:"📞"; }
  .kv-email::before   { content:"✉"; }
  .kv-address::before { content:"📍"; }
  .kv-web::before     { content:"🌐"; }

  .list{ list-style:none; padding:0; margin:0 }
  .list li{ margin:2.2mm 0; font-size:3.9mm; line-height:1.35 }

  .pill{
    background:var(--chip); color:#1f2937; display:inline-block; padding:1mm 3mm; border-radius:999px;
    font-weight:600; margin:1mm 2mm 0 0; font-size:3.5mm;
  }

  /* timeline look for cards */
  .timeline{ position:relative; padding-left:8mm; }
  .timeline::before{
    content:""; position:absolute; left:2mm; top:0; bottom:0; width:1px; background:#e5e7eb;
  }
  .card{
    position:relative; background:#fff; border:1px solid #e5e7eb; border-radius:8px;
    padding:4mm 5mm; margin:5mm 0; box-shadow:0 1px 3px rgba(0,0,0,.04)
  }
  .card::before{
    content:""; position:absolute; left:-6mm; top:8mm; width:3mm; height:3mm; border-radius:50%;
    background:#111827; box-shadow:0 0 0 1.2mm #f0f2f5;
  }
  .card .when{ color:var(--muted); font-size:3.6mm }
  .card .who{ font-weight:800; color:#111827; font-size:4.1mm; margin-bottom:1mm }

  .section-gap{ margin-top:8mm }
  .muted{ color:var(--muted) }
</style>
</head>
<body>
  <div class="page">
    <div class="cv">
      <aside class="sidebar">
        <div class="photo">
          @if (!string.IsNullOrWhiteSpace(Model?.PhotoUrl)) { <img src="@Model!.PhotoUrl" alt="Profile Photo" /> } else { <span class="ph">👤</span> }
        </div>

                @if (!string.IsNullOrWhiteSpace(Model?.PhoneNumber)
                || !string.IsNullOrWhiteSpace(Model?.Email)
                || !string.IsNullOrWhiteSpace(Model?.Address)
                || !string.IsNullOrWhiteSpace(Model?.WebPage))
                {
                    <h4>Contact</h4>

                    @if (!string.IsNullOrWhiteSpace(Model?.PhoneNumber))
                    {
                        <p class="kv">
                            <span class="ico">
                                <svg viewBox="0 0 24 24" aria-hidden="true">
                                    <path d="M22 16.92v3a2 2 0 0 1-2.18 2A19.86 19.86 0 0 1 3 5.18 2 2 0 0 1 5 3h3a2 2 0 0 1 2 1.72c.12.9.31 1.77.57 2.61a2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.47-1.03a2 2 0 0 1 2.11-.45c.84.26 1.71.45 2.61.57A2 2 0 0 1 22 16.92z" />
                                </svg>
                            </span>
                            <span>@Model!.PhoneNumber</span>
                        </p>
                    }

                    @if (!string.IsNullOrWhiteSpace(Model?.Email))
                    {
                        <p class="kv">
                            <span class="ico">
                                <svg viewBox="0 0 24 24" aria-hidden="true">
                                    <rect x="3" y="5" width="18" height="14" rx="2" ry="2" />
                                    <polyline points="3 7 12 13 21 7" />
                                </svg>
                            </span>
                            <span>@Model!.Email</span>
                        </p>
                    }

                    @if (!string.IsNullOrWhiteSpace(Model?.Address))
                    {
                        <p class="kv">
                            <span class="ico">
                                <svg viewBox="0 0 24 24" aria-hidden="true">
                                    <path d="M21 10c0 6-9 12-9 12S3 16 3 10a9 9 0 1 1 18 0" />
                                    <circle cx="12" cy="10" r="3" />
                                </svg>
                            </span>
                            <span>@Model!.Address</span>
                        </p>
                    }

                    @if (!string.IsNullOrWhiteSpace(Model?.WebPage))
                    {
                        <p class="kv">
                            <span class="ico">
                                <svg viewBox="0 0 24 24" aria-hidden="true">
                                    <circle cx="12" cy="12" r="10" />
                                    <line x1="2" y1="12" x2="22" y2="12" />
                                    <path d="M12 2a15.3 15.3 0 0 1 0 20M12 2a15.3 15.3 0 0 0 0 20" />
                                </svg>
                            </span>
                            <a href="@Model!.WebPage">@Model!.WebPage</a>
                        </p>
                    }
                }


        @if (Model?.Skills is { Count: > 0 }) {
          <h4 class="section-gap">Expertise</h4>
          <ul class="list">@foreach (var s in Model!.Skills) { <li>• @s.Name</li> }</ul>
        }

        @if (Model?.Language is { Count: > 0 }) {
          <h4 class="section-gap">Language</h4>
          <ul class="list">
            @foreach (var l in Model!.Language) {
              <li><span class="pill">@((object)(l.Language?.Name ?? $"Language #{l.LanguageId}"))</span>
                <span class="muted"> @l.Level </span></li>
            }
          </ul>
        }
      </aside>

      <main class="main">
        <h1>@Model?.FullName</h1>
        @if (!string.IsNullOrWhiteSpace(Model?.JobTitle)) { <div class="title">@Model!.JobTitle</div> }

        @if (!string.IsNullOrWhiteSpace(Model?.AboutMe)) {
          <h4>Profile</h4>
          <p style="margin:4mm 0 0; font-size:4mm;">@Model!.AboutMe</p>
        }

        @if (Model?.Employment is { Count: > 0 }) {
          <h4 class="section-gap">Work Experience</h4>
          <div class="timeline">
            @foreach (var emp in Model!.Employment) {
              <div class="card">
                <div class="who">@emp.CompanyName</div>
                <div class="when">@emp.From.ToString("MMM yyyy") – @(emp.IsCurrent ? "Present" : emp.To?.ToString("MMM yyyy"))</div>
                @if (!string.IsNullOrWhiteSpace(emp.Description)) { <div style="margin-top:2mm">@emp.Description</div> }
              </div>
            }
          </div>
        }

        @if (Model?.Education is { Count: > 0 }) {
          <h4 class="section-gap">Education</h4>
          <div class="timeline">
            @foreach (var edu in Model!.Education) {
              <div class="card">
                <div class="who">@edu.InstitutionName</div>
                <div class="when">@edu.From.ToString("MMM yyyy") – @(edu.IsCurrent ? "Present" : edu.To?.ToString("MMM yyyy"))</div>
                @if (!string.IsNullOrWhiteSpace(edu.Description)) { <div style="margin-top:2mm">@edu.Description</div> }
              </div>
            }
          </div>
        }
      </main>
    </div>
  </div>
</body>
</html>

@code { 
    [Parameter] public CVModel Model { get; set; } = new();

    private MarkupString FormatStackTraceLine(string line)
    {
        return new MarkupString(line
            .Replace(" at ", "<span class='method'> at </span>")
            .Replace(" in ", " <span class='file'>in </span>")
            .Replace(":line", " <span class='line'>:line</span>"));
    }
}
