//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class ApiClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    register(body: RegisterUserDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Auth/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRegister(_response);
        });
    }

    protected processRegister(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    login(body: LoginUserDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Auth/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    me(): Promise<UserInfoDto> {
        let url_ = this.baseUrl + "/api/Auth/me";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processMe(_response);
        });
    }

    protected processMe(response: Response): Promise<UserInfoDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserInfoDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserInfoDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    cVPOST(body: CreateCVDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/CV";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCVPOST(_response);
        });
    }

    protected processCVPOST(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    cVAll(): Promise<CVSummaryDto[]> {
        let url_ = this.baseUrl + "/api/CV";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCVAll(_response);
        });
    }

    protected processCVAll(response: Response): Promise<CVSummaryDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CVSummaryDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CVSummaryDto[]>(null as any);
    }

    /**
     * @param ids (optional) 
     * @return OK
     */
    cVDELETE(ids: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/CV?";
        if (ids === null)
            throw new Error("The parameter 'ids' cannot be null.");
        else if (ids !== undefined)
            url_ += "ids=" + encodeURIComponent("" + ids) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCVDELETE(_response);
        });
    }

    protected processCVDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    cVGET(id: number): Promise<CVSummaryDto> {
        let url_ = this.baseUrl + "/api/CV/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCVGET(_response);
        });
    }

    protected processCVGET(response: Response): Promise<CVSummaryDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CVSummaryDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CVSummaryDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    cVPUT(id: number, body: CreateCVDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/CV/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCVPUT(_response);
        });
    }

    protected processCVPUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    cVDELETE2(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/CV/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCVDELETE2(_response);
        });
    }

    protected processCVDELETE2(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    pdfInline(token: string): Promise<void> {
        let url_ = this.baseUrl + "/api/CV/pdf-inline/{token}";
        if (token === undefined || token === null)
            throw new Error("The parameter 'token' must be defined.");
        url_ = url_.replace("{token}", encodeURIComponent("" + token));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPdfInline(_response);
        });
    }

    protected processPdfInline(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    pdfTicket(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/CV/{id}/pdf-ticket";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPdfTicket(_response);
        });
    }

    protected processPdfTicket(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    pdf(token: string): Promise<void> {
        let url_ = this.baseUrl + "/api/CV/pdf/{token}";
        if (token === undefined || token === null)
            throw new Error("The parameter 'token' must be defined.");
        url_ = url_.replace("{token}", encodeURIComponent("" + token));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPdf(_response);
        });
    }

    protected processPdf(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    me2(): Promise<void> {
        let url_ = this.baseUrl + "/api/user/me";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processMe2(_response);
        });
    }

    protected processMe2(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class CVSummaryDto implements ICVSummaryDto {
    id?: number;
    cvName?: string | undefined;
    fullName?: string | undefined;
    dateOfBirth?: Date | undefined;
    phoneNumber?: string | undefined;
    email?: string | undefined;
    aboutMe?: string | undefined;
    photoUrl?: string | undefined;
    templateName?: string | undefined;
    createdAt?: Date;
    updatedAt?: Date;
    skills?: string[] | undefined;
    education?: EducationEntryDto[] | undefined;
    employment?: EmploymentEntryDto[] | undefined;

    constructor(data?: ICVSummaryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.cvName = _data["cvName"];
            this.fullName = _data["fullName"];
            this.dateOfBirth = _data["dateOfBirth"] ? new Date(_data["dateOfBirth"].toString()) : <any>undefined;
            this.phoneNumber = _data["phoneNumber"];
            this.email = _data["email"];
            this.aboutMe = _data["aboutMe"];
            this.photoUrl = _data["photoUrl"];
            this.templateName = _data["templateName"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            if (Array.isArray(_data["skills"])) {
                this.skills = [] as any;
                for (let item of _data["skills"])
                    this.skills!.push(item);
            }
            if (Array.isArray(_data["education"])) {
                this.education = [] as any;
                for (let item of _data["education"])
                    this.education!.push(EducationEntryDto.fromJS(item));
            }
            if (Array.isArray(_data["employment"])) {
                this.employment = [] as any;
                for (let item of _data["employment"])
                    this.employment!.push(EmploymentEntryDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CVSummaryDto {
        data = typeof data === 'object' ? data : {};
        let result = new CVSummaryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["cvName"] = this.cvName;
        data["fullName"] = this.fullName;
        data["dateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : <any>undefined;
        data["phoneNumber"] = this.phoneNumber;
        data["email"] = this.email;
        data["aboutMe"] = this.aboutMe;
        data["photoUrl"] = this.photoUrl;
        data["templateName"] = this.templateName;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        if (Array.isArray(this.skills)) {
            data["skills"] = [];
            for (let item of this.skills)
                data["skills"].push(item);
        }
        if (Array.isArray(this.education)) {
            data["education"] = [];
            for (let item of this.education)
                data["education"].push(item.toJSON());
        }
        if (Array.isArray(this.employment)) {
            data["employment"] = [];
            for (let item of this.employment)
                data["employment"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICVSummaryDto {
    id?: number;
    cvName?: string | undefined;
    fullName?: string | undefined;
    dateOfBirth?: Date | undefined;
    phoneNumber?: string | undefined;
    email?: string | undefined;
    aboutMe?: string | undefined;
    photoUrl?: string | undefined;
    templateName?: string | undefined;
    createdAt?: Date;
    updatedAt?: Date;
    skills?: string[] | undefined;
    education?: EducationEntryDto[] | undefined;
    employment?: EmploymentEntryDto[] | undefined;
}

export class CreateCVDto implements ICreateCVDto {
    cvName!: string;
    fullName!: string;
    phoneNumber!: string;
    email!: string;
    jobTitle?: string | undefined;
    dateOfBirth?: Date | undefined;
    aboutMe?: string | undefined;
    address?: string | undefined;
    webPage?: string | undefined;
    photoUrl?: string | undefined;
    templateId?: number | undefined;
    skills?: SkillDto[] | undefined;
    education?: EducationEntryDto[] | undefined;
    employment?: EmploymentEntryDto[] | undefined;
    languages?: LanguageEntryDto[] | undefined;

    constructor(data?: ICreateCVDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cvName = _data["cvName"];
            this.fullName = _data["fullName"];
            this.phoneNumber = _data["phoneNumber"];
            this.email = _data["email"];
            this.jobTitle = _data["jobTitle"];
            this.dateOfBirth = _data["dateOfBirth"] ? new Date(_data["dateOfBirth"].toString()) : <any>undefined;
            this.aboutMe = _data["aboutMe"];
            this.address = _data["address"];
            this.webPage = _data["webPage"];
            this.photoUrl = _data["photoUrl"];
            this.templateId = _data["templateId"];
            if (Array.isArray(_data["skills"])) {
                this.skills = [] as any;
                for (let item of _data["skills"])
                    this.skills!.push(SkillDto.fromJS(item));
            }
            if (Array.isArray(_data["education"])) {
                this.education = [] as any;
                for (let item of _data["education"])
                    this.education!.push(EducationEntryDto.fromJS(item));
            }
            if (Array.isArray(_data["employment"])) {
                this.employment = [] as any;
                for (let item of _data["employment"])
                    this.employment!.push(EmploymentEntryDto.fromJS(item));
            }
            if (Array.isArray(_data["languages"])) {
                this.languages = [] as any;
                for (let item of _data["languages"])
                    this.languages!.push(LanguageEntryDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateCVDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCVDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cvName"] = this.cvName;
        data["fullName"] = this.fullName;
        data["phoneNumber"] = this.phoneNumber;
        data["email"] = this.email;
        data["jobTitle"] = this.jobTitle;
        data["dateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : <any>undefined;
        data["aboutMe"] = this.aboutMe;
        data["address"] = this.address;
        data["webPage"] = this.webPage;
        data["photoUrl"] = this.photoUrl;
        data["templateId"] = this.templateId;
        if (Array.isArray(this.skills)) {
            data["skills"] = [];
            for (let item of this.skills)
                data["skills"].push(item.toJSON());
        }
        if (Array.isArray(this.education)) {
            data["education"] = [];
            for (let item of this.education)
                data["education"].push(item.toJSON());
        }
        if (Array.isArray(this.employment)) {
            data["employment"] = [];
            for (let item of this.employment)
                data["employment"].push(item.toJSON());
        }
        if (Array.isArray(this.languages)) {
            data["languages"] = [];
            for (let item of this.languages)
                data["languages"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICreateCVDto {
    cvName: string;
    fullName: string;
    phoneNumber: string;
    email: string;
    jobTitle?: string | undefined;
    dateOfBirth?: Date | undefined;
    aboutMe?: string | undefined;
    address?: string | undefined;
    webPage?: string | undefined;
    photoUrl?: string | undefined;
    templateId?: number | undefined;
    skills?: SkillDto[] | undefined;
    education?: EducationEntryDto[] | undefined;
    employment?: EmploymentEntryDto[] | undefined;
    languages?: LanguageEntryDto[] | undefined;
}

export class EducationEntryDto implements IEducationEntryDto {
    id?: number;
    institutionName?: string | undefined;
    description?: string | undefined;
    from?: Date;
    to?: Date | undefined;
    isCurrent?: boolean;

    constructor(data?: IEducationEntryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.institutionName = _data["institutionName"];
            this.description = _data["description"];
            this.from = _data["from"] ? new Date(_data["from"].toString()) : <any>undefined;
            this.to = _data["to"] ? new Date(_data["to"].toString()) : <any>undefined;
            this.isCurrent = _data["isCurrent"];
        }
    }

    static fromJS(data: any): EducationEntryDto {
        data = typeof data === 'object' ? data : {};
        let result = new EducationEntryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["institutionName"] = this.institutionName;
        data["description"] = this.description;
        data["from"] = this.from ? this.from.toISOString() : <any>undefined;
        data["to"] = this.to ? this.to.toISOString() : <any>undefined;
        data["isCurrent"] = this.isCurrent;
        return data;
    }
}

export interface IEducationEntryDto {
    id?: number;
    institutionName?: string | undefined;
    description?: string | undefined;
    from?: Date;
    to?: Date | undefined;
    isCurrent?: boolean;
}

export class EmploymentEntryDto implements IEmploymentEntryDto {
    id?: number;
    companyName?: string | undefined;
    description?: string | undefined;
    from?: Date;
    to?: Date | undefined;
    isCurrent?: boolean;

    constructor(data?: IEmploymentEntryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.companyName = _data["companyName"];
            this.description = _data["description"];
            this.from = _data["from"] ? new Date(_data["from"].toString()) : <any>undefined;
            this.to = _data["to"] ? new Date(_data["to"].toString()) : <any>undefined;
            this.isCurrent = _data["isCurrent"];
        }
    }

    static fromJS(data: any): EmploymentEntryDto {
        data = typeof data === 'object' ? data : {};
        let result = new EmploymentEntryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["companyName"] = this.companyName;
        data["description"] = this.description;
        data["from"] = this.from ? this.from.toISOString() : <any>undefined;
        data["to"] = this.to ? this.to.toISOString() : <any>undefined;
        data["isCurrent"] = this.isCurrent;
        return data;
    }
}

export interface IEmploymentEntryDto {
    id?: number;
    companyName?: string | undefined;
    description?: string | undefined;
    from?: Date;
    to?: Date | undefined;
    isCurrent?: boolean;
}

export class LanguageEntryDto implements ILanguageEntryDto {
    languageId!: number;
    level!: LanguageLevel;

    constructor(data?: ILanguageEntryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.languageId = _data["languageId"];
            this.level = _data["level"];
        }
    }

    static fromJS(data: any): LanguageEntryDto {
        data = typeof data === 'object' ? data : {};
        let result = new LanguageEntryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["languageId"] = this.languageId;
        data["level"] = this.level;
        return data;
    }
}

export interface ILanguageEntryDto {
    languageId: number;
    level: LanguageLevel;
}

export enum LanguageLevel {
    A1 = "A1",
    A2 = "A2",
    B1 = "B1",
    B2 = "B2",
    C1 = "C1",
    C2 = "C2",
}

export class LoginUserDto implements ILoginUserDto {
    email?: string | undefined;
    password?: string | undefined;

    constructor(data?: ILoginUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new LoginUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface ILoginUserDto {
    email?: string | undefined;
    password?: string | undefined;
}

export class RegisterUserDto implements IRegisterUserDto {
    firstName!: string;
    lastName!: string;
    email!: string;
    password!: string;

    constructor(data?: IRegisterUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): RegisterUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface IRegisterUserDto {
    firstName: string;
    lastName: string;
    email: string;
    password: string;
}

export class SkillDto implements ISkillDto {
    name?: string | undefined;

    constructor(data?: ISkillDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): SkillDto {
        data = typeof data === 'object' ? data : {};
        let result = new SkillDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    }
}

export interface ISkillDto {
    name?: string | undefined;
}

export class UserInfoDto implements IUserInfoDto {
    id?: number;
    email?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    cvs?: CVSummaryDto[] | undefined;

    constructor(data?: IUserInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.email = _data["email"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            if (Array.isArray(_data["cvs"])) {
                this.cvs = [] as any;
                for (let item of _data["cvs"])
                    this.cvs!.push(CVSummaryDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["email"] = this.email;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        if (Array.isArray(this.cvs)) {
            data["cvs"] = [];
            for (let item of this.cvs)
                data["cvs"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUserInfoDto {
    id?: number;
    email?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    cvs?: CVSummaryDto[] | undefined;
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}